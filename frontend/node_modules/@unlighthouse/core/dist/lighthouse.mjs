import { join } from "node:path";
import fs from "node:fs";
import { setMaxListeners } from "node:events";
import lighthouse from "lighthouse";
import minimist from "minimist";

//#region src/lighthouse.ts
setMaxListeners(0);
(async () => {
	const { routeReport, port, lighthouseOptions: lighthouseOptionsEncoded } = minimist(process.argv.slice(2));
	let routeReportJson;
	try {
		routeReportJson = JSON.parse(routeReport);
	} catch (e) {
		console.error("Failed to parse Unlighthouse config. Please create an issue with this output.", process.argv.slice(2), e);
		return false;
	}
	const lighthouseOptions = {
		...JSON.parse(lighthouseOptionsEncoded),
		output: ["html", "json"],
		port
	};
	try {
		const runnerResult = await lighthouse(routeReportJson.route.url, lighthouseOptions);
		fs.writeFileSync(join(routeReportJson.artifactPath, "lighthouse.json"), runnerResult.report[1]);
		fs.writeFileSync(join(routeReportJson.artifactPath, "lighthouse.html"), runnerResult.report[0]);
		return true;
	} catch (e) {
		console.error(e);
	}
	return false;
})();

//#endregion