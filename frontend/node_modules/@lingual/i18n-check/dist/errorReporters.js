"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contextMapping = exports.CheckOptions = void 0;
exports.formatSummaryTable = formatSummaryTable;
exports.formatTable = formatTable;
exports.formatCheckResultTable = formatCheckResultTable;
exports.formatInvalidTranslationsResultTable = formatInvalidTranslationsResultTable;
exports.CheckOptions = [
    'invalidKeys',
    'missingKeys',
    'unused',
    'undefined',
];
exports.contextMapping = {
    invalidKeys: 'invalid',
    missingKeys: 'missing',
    unused: 'unused',
    undefined: 'undefined',
};
function formatSummaryTable(result) {
    return formatTable(getSummaryRows(result));
}
const getSummaryRows = (checkResult) => {
    const rows = [];
    for (const [file, keys] of Object.entries(checkResult)) {
        rows.push([truncate(file), String(keys.length)]);
    }
    return [[['file', 'total']], rows];
};
function formatTable(rowGroups, lineSep = '\n') {
    // +2 for whitespace padding left and right
    const padding = 2;
    const colWidths = [];
    for (const rows of rowGroups) {
        for (const row of rows) {
            for (let index = 0; index < row.length; ++index) {
                colWidths[index] = Math.max(colWidths[index] ?? 0, row[index].length + padding);
            }
        }
    }
    const lines = [];
    lines.push(formatSeparatorRow(colWidths, '┌┬┐'));
    for (const rows of rowGroups) {
        for (const row of rows) {
            lines.push(formatRow(row, colWidths));
        }
        lines.push(formatSeparatorRow(colWidths, '├┼┤'));
    }
    lines[lines.length - 1] = formatSeparatorRow(colWidths, '└┴┘');
    return lines.join(lineSep);
}
function formatSeparatorRow(widths, [left, middle, right]) {
    return (left + widths.map((width) => ''.padEnd(width, '─')).join(middle) + right);
}
function formatRow(values, widths) {
    return (`│` +
        values
            .map((val, index) => ` ${val} `.padEnd(widths[index], ' '))
            .join('│') +
        `│`);
}
const truncate = (chars, len = 80) => chars.length > 80 ? `${chars.substring(0, len)}...` : chars;
function formatCheckResultTable(result) {
    return formatTable([
        [['file', 'key']],
        Object.entries(result).flatMap(([file, keys]) => keys.map((key) => [truncate(file), truncate(key)])),
    ]);
}
function formatInvalidTranslationsResultTable(result) {
    return formatTable([
        [['info', 'result']],
        ...Object.entries(result).flatMap(([file, errors]) => errors.map(({ key, msg }) => [
            ['file', truncate(file)],
            ['key', truncate(key)],
            ['msg', truncate(msg, 120)],
        ])),
    ]);
}
