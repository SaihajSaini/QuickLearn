"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const findInvalidTranslations_1 = require("./findInvalidTranslations");
const flattenTranslations_1 = require("./flattenTranslations");
const sourceFile = require('../../translations/messageExamples/en-us.json');
const secondaryFile = require('../../translations/messageExamples/de-de.json');
describe('findInvalidTranslations:compareTranslationFiles', () => {
    it('should return empty array if files are identical', () => {
        expect((0, findInvalidTranslations_1.compareTranslationFiles)((0, flattenTranslations_1.flattenTranslations)(sourceFile), (0, flattenTranslations_1.flattenTranslations)(sourceFile))).toEqual([]);
    });
    it('should return the invalid keys in the target file', () => {
        expect((0, findInvalidTranslations_1.compareTranslationFiles)((0, flattenTranslations_1.flattenTranslations)({
            ...sourceFile,
            'ten.eleven.twelve': 'ten eleven twelve',
        }), (0, flattenTranslations_1.flattenTranslations)(secondaryFile))).toEqual([{ key: 'multipleVariables', msg: 'Unexpected date element' }]);
    });
    it('should return empty array if placeholders are identical but in different positions', () => {
        expect((0, findInvalidTranslations_1.compareTranslationFiles)({
            basic: 'added {this} and {that} should work.',
        }, {
            basic: 'It is {this} with different position {that}',
        })).toEqual([]);
    });
});
describe('findInvalidTranslations', () => {
    it('should return an empty object if all files have no invalid keys', () => {
        expect((0, findInvalidTranslations_1.findInvalidTranslations)(sourceFile, { de: sourceFile })).toEqual({});
    });
    it('should return an object containing the keys for the missing language', () => {
        expect((0, findInvalidTranslations_1.findInvalidTranslations)({ ...sourceFile, 'ten.eleven.twelve': 'ten eleven twelve' }, { de: secondaryFile })).toEqual({
            de: [{ key: 'multipleVariables', msg: 'Unexpected date element' }],
        });
    });
    it('should return an object containing the keys for every language with missing key', () => {
        expect((0, findInvalidTranslations_1.findInvalidTranslations)({ ...sourceFile, 'ten.eleven.twelve': 'ten eleven twelve' }, {
            de: secondaryFile,
            fr: {
                'four.five.six': 'four five six',
                'seven.eight.nine': 'seven eight nine',
                'message.text-format': 'yo,<p><b>John</b></p>!',
            },
        })).toEqual({
            de: [{ key: 'multipleVariables', msg: 'Unexpected date element' }],
            fr: [
                {
                    key: 'message.text-format',
                    msg: 'Expected tag to contain "b" but received "p"',
                },
            ],
        });
    });
    it('should allow for different types of keys per locale', () => {
        expect((0, findInvalidTranslations_1.findInvalidTranslations)(sourceFile, {
            de: {
                ...secondaryFile,
                'message.plural': '{count, plural, other {# of {total} items}}',
            },
        })).toEqual({
            de: [
                {
                    key: 'multipleVariables',
                    msg: 'Unexpected date element',
                },
            ],
        });
    });
    it('should fail if a variable is changed in one of the translations', () => {
        expect((0, findInvalidTranslations_1.findInvalidTranslations)(sourceFile, {
            de: {
                ...secondaryFile,
                'message.plural': '{count, plural, other {# of {cargado} items}}',
            },
        })).toEqual({
            de: [
                {
                    key: 'message.plural',
                    msg: 'Error in plural: Expected argument to contain "total" but received "cargado"',
                },
                { key: 'multipleVariables', msg: 'Unexpected date element' },
            ],
        });
    });
});
