{"version":3,"sources":["../../src/scripts/server.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { PGlite, DebugLevel } from '@electric-sql/pglite'\nimport { PGLiteSocketServer } from '../index'\nimport { parseArgs } from 'node:util'\nimport { spawn, ChildProcess } from 'node:child_process'\n\n// Define command line argument options\nconst args = parseArgs({\n  options: {\n    db: {\n      type: 'string',\n      short: 'd',\n      default: 'memory://',\n      help: 'Database path (relative or absolute). Use memory:// for in-memory database.',\n    },\n    port: {\n      type: 'string',\n      short: 'p',\n      default: '5432',\n      help: 'Port to listen on',\n    },\n    host: {\n      type: 'string',\n      short: 'h',\n      default: '127.0.0.1',\n      help: 'Host to bind to',\n    },\n    path: {\n      type: 'string',\n      short: 'u',\n      default: undefined,\n      help: 'unix socket to bind to. Takes precedence over host:port',\n    },\n    debug: {\n      type: 'string',\n      short: 'v',\n      default: '0',\n      help: 'Debug level (0-5)',\n    },\n    run: {\n      type: 'string',\n      short: 'r',\n      default: undefined,\n      help: 'Command to run after server starts',\n    },\n    'include-database-url': {\n      type: 'boolean',\n      default: false,\n      help: 'Include DATABASE_URL in the environment of the subprocess',\n    },\n    'shutdown-timeout': {\n      type: 'string',\n      default: '5000',\n      help: 'Timeout in milliseconds for graceful subprocess shutdown (default: 5000)',\n    },\n    help: {\n      type: 'boolean',\n      short: '?',\n      default: false,\n      help: 'Show help',\n    },\n  },\n})\n\nconst help = `PGlite Socket Server\nUsage: pglite-server [options]\n\nOptions:\n  -d, --db=PATH       Database path (default: memory://)\n  -p, --port=PORT     Port to listen on (default: 5432)\n  -h, --host=HOST     Host to bind to (default: 127.0.0.1)\n  -u, --path=UNIX     Unix socket to bind to (default: undefined). Takes precedence over host:port\n  -v, --debug=LEVEL   Debug level 0-5 (default: 0)\n  -r, --run=COMMAND   Command to run after server starts\n  --include-database-url  Include DATABASE_URL in subprocess environment\n  --shutdown-timeout=MS   Timeout for graceful subprocess shutdown in ms (default: 5000)\n`\n\ninterface ServerConfig {\n  dbPath: string\n  port: number\n  host: string\n  path?: string\n  debugLevel: DebugLevel\n  runCommand?: string\n  includeDatabaseUrl: boolean\n  shutdownTimeout: number\n}\n\nclass PGLiteServerRunner {\n  private config: ServerConfig\n  private db: PGlite | null = null\n  private server: PGLiteSocketServer | null = null\n  private subprocessManager: SubprocessManager | null = null\n\n  constructor(config: ServerConfig) {\n    this.config = config\n  }\n\n  static parseConfig(): ServerConfig {\n    return {\n      dbPath: args.values.db as string,\n      port: parseInt(args.values.port as string, 10),\n      host: args.values.host as string,\n      path: args.values.path as string,\n      debugLevel: parseInt(args.values.debug as string, 10) as DebugLevel,\n      runCommand: args.values.run as string,\n      includeDatabaseUrl: args.values['include-database-url'] as boolean,\n      shutdownTimeout: parseInt(args.values['shutdown-timeout'] as string, 10),\n    }\n  }\n\n  private createDatabaseUrl(): string {\n    const { host, port, path } = this.config\n\n    if (path) {\n      // Unix socket connection\n      const socketDir = path.endsWith('/.s.PGSQL.5432')\n        ? path.slice(0, -13)\n        : path\n      return `postgresql://postgres:postgres@/postgres?host=${encodeURIComponent(socketDir)}`\n    } else {\n      // TCP connection\n      return `postgresql://postgres:postgres@${host}:${port}/postgres`\n    }\n  }\n\n  private async initializeDatabase(): Promise<void> {\n    console.log(`Initializing PGLite with database: ${this.config.dbPath}`)\n    console.log(`Debug level: ${this.config.debugLevel}`)\n\n    this.db = new PGlite(this.config.dbPath, { debug: this.config.debugLevel })\n    await this.db.waitReady\n    console.log('PGlite database initialized')\n  }\n\n  private setupServerEventHandlers(): void {\n    if (!this.server || !this.subprocessManager) {\n      throw new Error('Server or subprocess manager not initialized')\n    }\n\n    this.server.addEventListener('listening', (event) => {\n      const detail = (\n        event as CustomEvent<{ port: number; host: string } | { host: string }>\n      ).detail\n      console.log(`PGLiteSocketServer listening on ${JSON.stringify(detail)}`)\n\n      // Run the command after server starts listening\n      if (this.config.runCommand && this.subprocessManager) {\n        const databaseUrl = this.createDatabaseUrl()\n        this.subprocessManager.spawn(\n          this.config.runCommand,\n          databaseUrl,\n          this.config.includeDatabaseUrl,\n        )\n      }\n    })\n\n    this.server.addEventListener('connection', (event) => {\n      const { clientAddress, clientPort } = (\n        event as CustomEvent<{ clientAddress: string; clientPort: number }>\n      ).detail\n      console.log(`Client connected from ${clientAddress}:${clientPort}`)\n    })\n\n    this.server.addEventListener('error', (event) => {\n      const error = (event as CustomEvent<Error>).detail\n      console.error('Socket server error:', error)\n    })\n  }\n\n  private setupSignalHandlers(): void {\n    process.on('SIGINT', () => this.shutdown())\n    process.on('SIGTERM', () => this.shutdown())\n  }\n\n  async start(): Promise<void> {\n    try {\n      // Initialize database\n      await this.initializeDatabase()\n\n      if (!this.db) {\n        throw new Error('Database initialization failed')\n      }\n\n      // Create and setup the socket server\n      this.server = new PGLiteSocketServer({\n        db: this.db,\n        port: this.config.port,\n        host: this.config.host,\n        path: this.config.path,\n        inspect: this.config.debugLevel > 0,\n      })\n\n      // Create subprocess manager\n      this.subprocessManager = new SubprocessManager((exitCode) => {\n        this.shutdown(exitCode)\n      })\n\n      // Setup event handlers\n      this.setupServerEventHandlers()\n      this.setupSignalHandlers()\n\n      // Start the server\n      await this.server.start()\n    } catch (error) {\n      console.error('Failed to start PGLiteSocketServer:', error)\n      throw error\n    }\n  }\n\n  async shutdown(exitCode: number = 0): Promise<void> {\n    console.log('\\nShutting down PGLiteSocketServer...')\n\n    // Terminate subprocess if running\n    if (this.subprocessManager) {\n      this.subprocessManager.terminate(this.config.shutdownTimeout)\n    }\n\n    // Stop server\n    if (this.server) {\n      await this.server.stop()\n    }\n\n    // Close database\n    if (this.db) {\n      await this.db.close()\n    }\n\n    console.log('Server stopped')\n    process.exit(exitCode)\n  }\n}\n\nclass SubprocessManager {\n  private childProcess: ChildProcess | null = null\n  private onExit: (code: number) => void\n\n  constructor(onExit: (code: number) => void) {\n    this.onExit = onExit\n  }\n\n  get process(): ChildProcess | null {\n    return this.childProcess\n  }\n\n  spawn(\n    command: string,\n    databaseUrl: string,\n    includeDatabaseUrl: boolean,\n  ): void {\n    console.log(`Running command: ${command}`)\n\n    // Prepare environment variables\n    const env = { ...process.env }\n    if (includeDatabaseUrl) {\n      env.DATABASE_URL = databaseUrl\n      console.log(`Setting DATABASE_URL=${databaseUrl}`)\n    }\n\n    // Parse and spawn the command\n    const commandParts = command.trim().split(/\\s+/)\n    this.childProcess = spawn(commandParts[0], commandParts.slice(1), {\n      env,\n      stdio: 'inherit',\n    })\n\n    this.childProcess.on('error', (error) => {\n      console.error('Error running command:', error)\n      // If subprocess fails to start, shutdown the server\n      console.log('Subprocess failed to start, shutting down...')\n      this.onExit(1)\n    })\n\n    this.childProcess.on('close', (code) => {\n      console.log(`Command exited with code ${code}`)\n      this.childProcess = null\n\n      // If child process exits with non-zero code, notify parent\n      if (code !== null && code !== 0) {\n        console.log(\n          `Child process failed with exit code ${code}, shutting down...`,\n        )\n        this.onExit(code)\n      }\n    })\n  }\n\n  terminate(timeout: number): void {\n    if (this.childProcess) {\n      console.log('Terminating child process...')\n      this.childProcess.kill('SIGTERM')\n\n      // Give it a moment to exit gracefully, then force kill if needed\n      setTimeout(() => {\n        if (this.childProcess && !this.childProcess.killed) {\n          console.log('Force killing child process...')\n          this.childProcess.kill('SIGKILL')\n        }\n      }, timeout)\n    }\n  }\n}\n\n// Main execution\nasync function main() {\n  // Show help and exit if requested\n  if (args.values.help) {\n    console.log(help)\n    process.exit(0)\n  }\n\n  try {\n    const config = PGLiteServerRunner.parseConfig()\n    const serverRunner = new PGLiteServerRunner(config)\n    await serverRunner.start()\n  } catch (error) {\n    console.error('Unhandled error:', error)\n    process.exit(1)\n  }\n}\n\n// Run the main function\nmain()\n"],"mappings":"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","names":["PGlite","parseArgs","spawn","args","help","PGLiteServerRunner","config","host","port","path","socketDir","PGlite","event","detail","databaseUrl","clientAddress","clientPort","error","PGLiteSocketServer","SubprocessManager","exitCode","onExit","command","includeDatabaseUrl","env","commandParts","code","timeout","main"]}