"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseScript = parseScript;
const tslib_1 = require("tslib");
const ts_transformer_1 = require("@formatjs/ts-transformer");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const console_utils_1 = require("./console_utils");
/**
 * Invoid TypeScript module transpilation with our TS transformer
 * @param opts Formatjs TS Transformer opt
 * @param fn filename
 */
function parseScript(opts, fn) {
    return (source) => {
        let output;
        try {
            (0, console_utils_1.debug)('Using TS compiler to process file', fn);
            output = typescript_1.default.transpileModule(source, {
                compilerOptions: {
                    allowJs: true,
                    target: typescript_1.default.ScriptTarget.ESNext,
                    noEmit: true,
                    experimentalDecorators: true,
                },
                reportDiagnostics: true,
                fileName: fn,
                transformers: {
                    before: [(0, ts_transformer_1.transformWithTs)(typescript_1.default, opts)],
                },
            });
        }
        catch (e) {
            if (e instanceof Error) {
                e.message = `Error processing file ${fn} 
${e.message || ''}`;
            }
            throw e;
        }
        if (output.diagnostics) {
            const errs = output.diagnostics.filter(d => d.category === typescript_1.default.DiagnosticCategory.Error);
            if (errs.length) {
                throw new Error(typescript_1.default.formatDiagnosticsWithColorAndContext(errs, {
                    getCanonicalFileName: fileName => fileName,
                    getCurrentDirectory: () => process.cwd(),
                    getNewLine: () => typescript_1.default.sys.newLine,
                }));
            }
        }
    };
}
