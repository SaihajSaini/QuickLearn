import type { AxiosResponse } from 'axios';
import { RuntimeCheck, RuntimeCheckProps } from './check';
import { Diagnostics } from './diagnostics';
import { PlaywrightCheckBundle } from './playwright-check-bundle';
import { Ref } from './ref';
export interface PlaywrightCheckProps extends RuntimeCheckProps {
    playwrightConfigPath: string;
    installCommand?: string;
    testCommand?: string;
    pwProjects?: string | string[];
    pwTags?: string | string[];
    include?: string | string[];
    groupName?: string;
}
export declare class PlaywrightCheck extends RuntimeCheck {
    #private;
    installCommand?: string;
    testCommand: string;
    playwrightConfigPath: string;
    pwProjects: string[];
    pwTags: string[];
    include: string[];
    groupName?: string;
    constructor(logicalId: string, props: PlaywrightCheckProps);
    validate(diagnostics: Diagnostics): Promise<void>;
    getSourceFile(): string | undefined;
    static buildTestCommand(testCommand: string, playwrightConfigPath: string, playwrightProject?: string[], playwrightTag?: string[]): string;
    static bundleProject(playwrightConfigPath: string, include: string[]): Promise<{
        key: any;
        browsers: string[];
        relativePlaywrightConfigPath: string;
        cacheHash: string;
    }>;
    static uploadPlaywrightProject(dir: string): Promise<AxiosResponse>;
    bundle(): Promise<PlaywrightCheckBundle>;
    synthesize(): {
        checkType: string;
        testCommand: string;
        installCommand: string | undefined;
        runtimeId: string | undefined;
        environmentVariables: import("./key-value-pair").default[] | undefined;
        name: string;
        activated: boolean | undefined;
        muted: boolean | undefined;
        shouldFail: boolean | undefined;
        locations: (keyof import("..").Region)[] | undefined;
        privateLocations: undefined;
        tags: string[] | undefined;
        frequency: number | undefined;
        frequencyOffset: number | undefined;
        groupId: Ref | null;
        retryStrategy: import("./retry-strategy").RetryStrategy | null | undefined;
        doubleCheck: boolean | undefined;
        alertSettings: import("./alert-escalation-policy").AlertEscalation | undefined;
        useGlobalAlertSettings: boolean | undefined;
        runParallel: boolean | undefined;
        triggerIncident: {
            serviceId: Ref;
            severity: "MINOR" | "MEDIUM" | "MAJOR" | "CRITICAL";
            name: string;
            description: string;
            notifySubscribers: boolean;
        } | undefined;
    };
}
